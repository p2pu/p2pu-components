{"version":3,"sources":["../../src/Filters/LocationFilterForm.jsx"],"names":["React","Component","axios","t","CheckboxWithLabel","RangeSliderWithLabel","CitySelect","LocationFilterForm","props","checkboxValue","useGeolocation","setState","gettingLocation","useLocation","updateQueryParams","latitude","longitude","success","position","coords","city","detectDistanceUnit","closeFilter","error","options","timeout","maximumAge","navigator","geolocation","getCurrentPosition","lat","lon","countriesUsingMiles","url","get","then","res","useMiles","indexOf","countryCode","label","state","distance","unit","value","generateDistanceValue","Math","round","Boolean","prevProps","distanceSliderLabel","generateDistanceSliderLabel","distanceValue","generateLocationLabel","getLocation","handleRangeChange","handleCitySelect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport {t} from 'ttag';\nimport CheckboxWithLabel from '../InputFields/CheckboxWithLabel'\nimport RangeSliderWithLabel from '../InputFields/RangeSliderWithLabel'\nimport CitySelect from '../InputFields/CitySelect'\n\nexport default class LocationFilterForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { useLocation: (Boolean(props.latitude) && Boolean(props.longitude)) }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      if (this.props.latitude === null && this.props.longitude === null) {\n        this.setState({ useLocation: false })\n      }\n    }\n  }\n\n  getLocation = (checkboxValue) => {\n    const useGeolocation = checkboxValue['geolocation'];\n\n    this.setState({ gettingLocation: useGeolocation, useLocation: useGeolocation });\n\n    if (useGeolocation === false) {\n      this.props.updateQueryParams({ latitude: null, longitude: null, useLocation: useGeolocation });\n      return;\n    }\n\n    const success = (position) => {\n      this.props.updateQueryParams({ latitude: position.coords.latitude, longitude: position.coords.longitude, city: null })\n      this.detectDistanceUnit(position.coords.latitude, position.coords.longitude);\n      this.setState({ gettingLocation: false });\n      this.props.closeFilter();\n    }\n\n    const error = () => {\n      this.setState({ error: t`Unable to detect location.` })\n    }\n\n    const options = {\n      timeout: 10000,\n      maximumAge: 60000\n    }\n\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(success, error, options)\n    } else {\n      this.setState({ error: t`Geolocation is not supported by this browser.`})\n    }\n  }\n\n  detectDistanceUnit = (lat, lon) => {\n    const countriesUsingMiles = ['US', 'GB', 'LR', 'MM'];\n    const url = `http://api.geonames.org/countryCodeJSON?lat=${lat}&lng=${lon}&username=p2pu`;\n\n    axios.get(url)\n      .then(res => {\n        const useMiles = countriesUsingMiles.indexOf(res.countryCode) >= 0;\n        this.props.updateQueryParams({ useMiles })\n      })\n  }\n\n  generateLocationLabel = () => {\n    let label = t`Use my current location`;\n\n    if (this.state.error) {\n      label = this.state.error;\n    } else if (this.state.gettingLocation) {\n      label = t`Detecting your location...`;\n    } else if (!this.state.gettingLocation && this.props.latitude && this.props.longitude) {\n      label = t`Using your current location`;\n    }\n\n    return label;\n  }\n\n  handleCitySelect = (city) => {\n    this.props.updateQueryParams({ ...city, latitude: null, longitude: null, distance: 50 });\n    this.setState({ useLocation: false });\n    this.props.closeFilter();\n  }\n\n  handleRangeChange = ({ distance }) => {\n    if (this.props.useMiles) {\n      return this.props.updateQueryParams({ distance: distance * 1.6 })\n    }\n    this.props.updateQueryParams({ distance })\n  }\n\n  generateDistanceSliderLabel = () => {\n    const unit = this.props.useMiles ? t`miles` : t`km`;\n    const value = this.generateDistanceValue();\n    return t`Within ${value} ${unit}`\n  }\n\n  generateDistanceValue = () => {\n    const value = this.props.useMiles ? this.props.distance * 0.62 : this.props.distance;\n    return Math.round(value / 10) * 10;\n  }\n\n  render() {\n    const distanceSliderLabel = this.generateDistanceSliderLabel();\n    const distanceValue = this.generateDistanceValue();\n\n    return(\n      <div>\n        <label for=\"search-input\" class=\"form-label\">Location</label>\n        <CheckboxWithLabel\n          classes='col-sm-12'\n          name='geolocation'\n          label={this.generateLocationLabel()}\n          value={this.state.useLocation || false}\n          handleChange={this.getLocation}\n        />\n        <RangeSliderWithLabel\n          classes='col-sm-12'\n          label={distanceSliderLabel}\n          name='distance'\n          value={distanceValue}\n          handleChange={this.handleRangeChange}\n          min={10}\n          max={150}\n          step={10}\n          disabled={!this.state.useLocation}\n        />\n        <div className='divider col-sm-12'>\n          <div className='divider-line'></div>\n          <div className='divider-text'>{t`or`}</div>\n        </div>\n        <CitySelect\n          label={t`Select a location`}\n          classes='city-select col-sm-12 search-input'\n          name='city'\n          value={this.props.city}\n          handleChange={this.handleCitySelect}\n          placeholder={t`Start typing a city name`}\n          noResultsText={t`No results for this city`}\n          isMulti={false}\n        />\n      </div>\n    )\n  }\n}\n"],"file":"LocationFilterForm.js"}