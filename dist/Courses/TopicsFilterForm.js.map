{"version":3,"sources":["../../src/Courses/TopicsFilterForm.jsx"],"names":["React","Component","ApiHelper","t","Select","TopicsFilterForm","props","resourceType","searchSubject","api","origin","params","callback","response","options","mapArrayToSelectOptions","topics","setState","fetchResource","topic","updateQueryParams","filter","topicArray","Object","keys","sort","map","value","label","state","fetchTopics","option","indexOf","topicDisplay","slug","display","length","onChange","e","removeTopic"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,CAAT,QAAkB,MAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;IAGqBC,gB;;;;;AACnB,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,kEASL,YAAM;AAClB,UAAMC,YAAY,aAAM,MAAKD,KAAL,CAAWE,aAAjB,WAAlB;AACA,UAAMC,GAAG,GAAG,IAAIP,SAAJ,CAAcK,YAAd,EAA4B,MAAKD,KAAL,CAAWI,MAAvC,CAAZ;AACA,UAAMC,MAAM,GAAG,EAAf;;AACA,UAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AAC7B,YAAMC,OAAO,GAAG,MAAKC,uBAAL,CAA6BF,QAAQ,CAACG,MAAtC,CAAhB;;AACA,cAAKC,QAAL,CAAc;AAAEH,UAAAA,OAAO,EAAPA;AAAF,SAAd;AACD,OAHD;;AAKAL,MAAAA,GAAG,CAACS,aAAJ,CAAkB;AAAEP,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,QAAQ,EAARA;AAAV,OAAlB;AACD,KAnBkB;;AAAA,+DAqBR,gBAAa;AAAA,UAAXO,KAAW,QAAXA,KAAW;AACtB,+BAAoB,MAAKb,KAAzB,CAAKU,MAAL;AAAA,UAAKA,MAAL,mCAAc,EAAd;;AACA,UAAIG,KAAJ,EAAW;AACT,cAAKb,KAAL,CAAWc,iBAAX,CAA6B;AAACJ,UAAAA,MAAM,+BAAMA,MAAN,IAAcG,KAAd;AAAP,SAA7B;AACD;AACF,KA1BkB;;AAAA,kEA4BL,UAACA,KAAD,EAAW;AACvB,YAAKb,KAAL,CAAWc,iBAAX,CAA6B;AAACJ,QAAAA,MAAM,EAAE,MAAKV,KAAL,CAAWU,MAAX,CAAkBK,MAAlB,CAAyB,UAAAlB,CAAC;AAAA,iBAAIA,CAAC,IAAIgB,KAAT;AAAA,SAA1B;AAAT,OAA7B;AACD,KA9BkB;;AAAA,8EAgCO,UAACH,MAAD,EAAY;AACpC,UAAMM,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYR,MAAZ,EAAoBS,IAApB,EAAnB;AACA,aAAOH,UAAU,CAACI,GAAX,CAAe,UAACP,KAAD;AAAA,eAAY;AAAEQ,UAAAA,KAAK,EAAER,KAAT;AAAgBS,UAAAA,KAAK,EAAEZ,MAAM,CAACG,KAAD;AAA7B,SAAZ;AAAA,OAAf,CAAP;AACD,KAnCkB;;AAEjB,UAAKU,KAAL,GAAa;AAAEf,MAAAA,OAAO,EAAE;AAAX,KAAb;AAFiB;AAGlB;;;;WAED,6BAAoB;AAClB,WAAKgB,WAAL;AACD;;;WA8BD,kBAAS;AAAA;;AACP,gCAAoB,KAAKxB,KAAzB,CAAKU,MAAL;AAAA,UAAKA,MAAL,oCAAc,EAAd;AACA,UAAIF,OAAO,GAAG,KAAKe,KAAL,CAAWf,OAAX,CAAmBO,MAAnB,CAA2B,UAAAU,MAAM;AAAA,eAAIf,MAAM,CAACgB,OAAP,CAAeD,MAAM,CAACJ,KAAtB,KAAgC,CAAC,CAArC;AAAA,OAAjC,CAAd;;AAEA,UAAMM,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI,EAAI;AAC3B,YAAMC,OAAO,GAAG,MAAI,CAACN,KAAL,CAAWf,OAAX,CAAmBO,MAAnB,CAA0B,UAAAU,MAAM;AAAA,iBAAIG,IAAI,IAAIH,MAAM,CAACJ,KAAnB;AAAA,SAAhC,CAAhB;;AACA,YAAIQ,OAAO,CAACC,MAAR,IAAkB,CAAtB,EACE,OAAOD,OAAO,CAAC,CAAD,CAAP,CAAWP,KAAlB;AACF,eAAOM,IAAP;AACD,OALD;;AAOA,0BACE,uDACE;AAAM,QAAA,SAAS,EAAC;AAAhB,sBACE;AAAO,QAAA,OAAO,EAAC,aAAf;AAA6B,QAAA,SAAS,EAAC;AAAvC,kBADF,eAEE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAE,OADR;AAEE,QAAA,OAAO,EAAC,aAFV;AAGE,QAAA,OAAO,EAAEpB,OAHX;AAIE,QAAA,OAAO,EAAE,KAJX;AAKE,QAAA,KAAK,EAAE,IALT;AAME,QAAA,YAAY,EAAE,KAAKuB,QANrB;AAOE,QAAA,WAAW,EAAElC,CAAF;AAPb,QAFF,EAYI,KAAKG,KAAL,CAAWU,MAAX,iBAAqB;AAAK,QAAA,SAAS,EAAC;AAAf,SAEjB,KAAKV,KAAL,CAAWU,MAAX,IAAqBA,MAAM,CAACU,GAAP,CAAW,UAAAP,KAAK;AAAA,4BACnC;AAAM,UAAA,GAAG,YAAKA,KAAL,WAAT;AAA6B,UAAA,SAAS,EAAC;AAAvC,wBACE;AAAM,UAAA,SAAS,EAAC,wBAAhB;AAAyC,UAAA,IAAI,EAAC,QAA9C;AAAuD,UAAA,OAAO,EAAE,iBAAAmB,CAAC;AAAA,mBAAI,MAAI,CAACC,WAAL,CAAiBpB,KAAjB,CAAJ;AAAA;AAAjE,mBADF,EAC6Gc,YAAY,CAACd,KAAD,CADzH,CADmC;AAAA,OAAhB,CAFJ,CAZzB,CADF,CADF;AA0BD;;;;EA3E2ClB,S;;SAAzBI,gB","sourcesContent":["import React, { Component } from 'react'\nimport ApiHelper from '../utils/apiHelper'\nimport { t } from 'ttag'\nimport Select from '../InputFields/Select';\n\n\nexport default class TopicsFilterForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { options: [] }\n  }\n\n  componentDidMount() {\n    this.fetchTopics();\n  }\n\n  fetchTopics = () => {\n    const resourceType = `${this.props.searchSubject}Topics`;\n    const api = new ApiHelper(resourceType, this.props.origin);\n    const params = {};\n    const callback = (response) => {\n      const options = this.mapArrayToSelectOptions(response.topics);\n      this.setState({ options })\n    }\n\n    api.fetchResource({ params, callback })\n  }\n\n  onChange = ({topic}) => {\n    let {topics = []} = this.props;\n    if (topic) {\n      this.props.updateQueryParams({topics: [...topics, topic]});\n    }\n  }\n\n  removeTopic = (topic) => {\n    this.props.updateQueryParams({topics: this.props.topics.filter(t => t != topic)});\n  }\n\n  mapArrayToSelectOptions = (topics) => {\n    const topicArray = Object.keys(topics).sort()\n    return topicArray.map((topic) => ({ value: topic, label: topics[topic] }))\n  }\n\n  render() {\n    let {topics = []} = this.props;\n    let options = this.state.options.filter( option => topics.indexOf(option.value) == -1);\n\n    const topicDisplay = slug => {\n      const display = this.state.options.filter(option => slug == option.value);\n      if (display.length == 1)\n        return display[0].label;\n      return slug;\n    };\n\n    return(\n      <>\n        <form className=\"filter\">\n          <label htmlFor=\"topic-input\" className=\"form-label\">Topics</label>\n          <Select\n            name={'topic'}\n            inputId=\"topic-input\"\n            options={options}\n            isMulti={false}\n            value={null}\n            handleChange={this.onChange}\n            placeholder={t`Select topic(s)`}\n          />\n          { \n            this.props.topics && <div className=\"badges selected pt-2\">\n              { \n                this.props.topics && topics.map(topic => \n                  <span key={`${topic}-badge`} className=\"badge topic-selected topic\">\n                    <span className=\"material-icons dismiss\" role=\"button\" onClick={e => this.removeTopic(topic)}>close</span>{topicDisplay(topic)}</span>\n                )\n              }\n            </div>\n          }\n        </form>\n      </>\n    )\n  }\n}\n"],"file":"TopicsFilterForm.js"}