{"version":3,"sources":["../../../src/InputFields/RichTextWithLabel/RichTextWithLabel.js"],"names":["React","useState","PropTypes","InputWrapper","Editor","TextareaWithLabel","props","name","id","label","value","handleChange","required","disabled","errorMessage","helpText","classes","placeholder","apiKey","tinymceScriptSrc","maxLength","rest","charCount","setCharCount","onChange","input","editor","wordcount","plugins","body","getCharacterCount","erroMessageWithCharCount","height","menubar","toolbar","defaultProps","type","console","log","propTypes","func","isRequired","string","bool","number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport InputWrapper from '../InputWrapper'\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst TextareaWithLabel = (props) => {\n  const {\n    name,\n    id,\n    label,\n    value,\n    handleChange,\n    required,\n    disabled,\n    errorMessage,\n    helpText,\n    classes,\n    placeholder,\n    apiKey,\n    tinymceScriptSrc,\n    maxLength,\n    ...rest\n  } = props;\n\n  const [ charCount, setCharCount ] = useState()\n\n  const onChange = (input, editor) => {\n    const wordcount = editor.plugins.wordcount\n    const charCount = wordcount.body.getCharacterCount()\n\n    setCharCount(charCount)\n    props.handleChange({ [props.name]: input })\n  }\n\n  const erroMessageWithCharCount = charCount > maxLength ? `The text is too long: ${charCount}/${maxLength} characters.` : errorMessage\n\n  return (\n    <InputWrapper\n      label={label}\n      name={name}\n      id={id}\n      required={required}\n      disabled={disabled}\n      errorMessage={erroMessageWithCharCount}\n      helpText={helpText}\n      classes={classes}\n    >\n      <Editor\n        apiKey={apiKey}\n        tinymceScriptSrc={tinymceScriptSrc}\n        value={value}\n        onEditorChange={onChange}\n        init={{\n          height: 300,\n          menubar: false,\n          plugins: [\n            'link lists wordcount'\n          ],\n          toolbar: 'undo redo | formatselect | bold italic | bullist numlist | link | removeformat',\n          'valid_elements': 'p,h3,h4,h5,h6,strong,em,a,a[href|target=_blank|rel=noopener],ul,ol,li,div,span',\n          'block_formats': 'Paragraph=p; Heading 1=h3; Heading 2=h4; Heading 3=h5',\n        }}\n      />\n    </InputWrapper>\n  )\n}\n\nTextareaWithLabel.defaultProps = {\n  type: 'text',\n  value: \"\",\n  required: false,\n  disabled: false,\n  label: 'Textarea input',\n  classes: '',\n  apiKey: '',\n  handleChange: (input) => console.log(\"Implement a function to save input\", input),\n  maxLength: 1000,\n}\n\nTextareaWithLabel.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  apiKey: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  required: PropTypes.bool,\n  disabled: PropTypes.bool,\n  label: PropTypes.string,\n  classes: PropTypes.string,\n  maxLength: PropTypes.number,\n}\n\nexport default TextareaWithLabel;\n"],"file":"RichTextWithLabel.js"}