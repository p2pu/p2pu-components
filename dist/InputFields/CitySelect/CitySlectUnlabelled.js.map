{"version":3,"sources":["../../../src/InputFields/CitySelect/CitySlectUnlabelled.js"],"names":["React","Component","PropTypes","Select","jsonp","InputWrapper","CitySelect","props","selected","query","label","handleChange","name","url","err","res","console","log","items","filterCitiesFromResults","cities","filter","city","uniqBy","arr","fn","Map","map","x","values","el","value","setState","isMulti","state","v","find","populateCities","id","disabled","required","errorMessage","helpText","classes","selectClasses","handleInputChange","noResultsText","placeholder","isClearable","rest","getSelected","onChange","theme","colors","primary","primary75","primary50","primary25","propTypes","func","isRequired","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Select from 'react-select'\nimport jsonp from 'jsonp'\n\nimport InputWrapper from '../InputWrapper'\n\nexport default class CitySelect extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { cities: [] }\n    this.populateCities();\n  }\n\n  onChange = (selected) => {\n    const query = selected ? selected.label : selected;\n\n    this.props.handleChange({ [this.props.name]: query })\n  }\n\n  populateCities = () => {\n    const url = 'https://learningcircles.p2pu.org/api/learningcircles/cities'\n    jsonp(url, null, (err, res) => {\n      if (err) {\n        console.log(err)\n      } else {\n        if (res.items) {\n          this.filterCitiesFromResults(res.items);\n        } else {\n          console.log(res)\n        }\n      }\n    })\n  }\n\n  filterCitiesFromResults = (cities) => {\n    cities = cities.filter( city => city );\n    const uniqBy = (arr, fn) => [...new Map(arr.map((x) => [typeof fn === 'function' ? fn(x) : x[fn], x])).values()]\n    cities = uniqBy(cities, el => el.value);\n\n    this.setState({ cities });\n  }\n\n  getSelected = value => {\n    const { isMulti } = this.props;\n    const { cities } = this.state;\n    if (!value) {\n      return null\n    }\n\n    if (isMulti && typeof(value === 'object')) {\n      return value.map(v => cities.find(city => city.label === v))\n    }\n\n    return cities.find(city => city.label === value)\n  }\n\n  render() {\n    const { label, name, id, value, disabled, required, errorMessage, helpText, classes, selectClasses, handleInputChange, noResultsText, placeholder, isClearable, isMulti, ...rest } = this.props;\n    const { cities } = this.state;\n    const selected = this.getSelected(value)\n\n    return(\n      <InputWrapper\n        label={label}\n        name={name}\n        id={id}\n        required={required}\n        disabled={disabled}\n        errorMessage={errorMessage}\n        helpText={helpText}\n        classes={classes}\n      >\n        <Select\n          name={ name }\n          className={ `city-select ${selectClasses}` }\n          value={ selected }\n          options={ cities }\n          onChange={ this.onChange }\n          onInputChange={ handleInputChange }\n          noResultsText={ noResultsText }\n          placeholder={ placeholder }\n          isClearable={ isClearable }\n          isMulti={ isMulti }\n          isDisabled={ disabled }\n          classNamePrefix={'city-select'}\n          theme={theme => ({\n            ...theme,\n            colors: {\n              ...theme.colors,\n              primary: '#05c6b4',\n              primary75: '#D3D8E6',\n              primary50: '#e0f7f5',\n              primary25: '#F3F4F8'\n            },\n          })}\n          {...rest}\n        />\n      </InputWrapper>\n    )\n  }\n}\n\n\nCitySelect.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  handleInputChange: PropTypes.func,\n  classes: PropTypes.string,\n  noResultsText: PropTypes.string,\n  placeholder: PropTypes.string,\n  helpText: PropTypes.string,\n  errorMessage: PropTypes.string,\n  isClearable: PropTypes.bool,\n  isMulti: PropTypes.bool,\n}\n\nCitySelect.defaultProps = {\n  noResultsText: \"No results for this city\",\n  placeholder: \"Start typing a city name...\",\n  classes: \"\",\n  name: \"select-city\",\n  handleChange: (selected) => console.log(\"Implement a function to save selection\", selected),\n  isClearable: true,\n  isMulti: false,\n  value: null,\n}\n\n"],"file":"CitySlectUnlabelled.js"}