{"version":3,"sources":["../../../src/InputFields/PlaceSelect/PlaceSelect.js"],"names":["React","Component","PropTypes","axios","AsyncSelect","InputWrapper","ALGOLIA_ENDPOINT","KANSAS_CITY_OPTION","label","value","administrative","country","locale_names","_geoloc","lat","lng","PlaceSelect","props","selected","handleChange","name","setState","query","url","data","method","then","res","options","hits","map","place","generateCityOption","toLowerCase","includes","unshift","err","console","log","placeId","get","handleSelect","state","objectID","fetchPlaceById","city","id","required","disabled","errorMessage","helpText","classes","selectClasses","handleInputChange","noResultsText","placeholder","isClearable","isMulti","rest","searchPlaces","theme","colors","primary","primary75","primary50","primary25","propTypes","func","isRequired","string","place_id","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport axios from 'axios';\nimport AsyncSelect from 'react-select/async';\nimport InputWrapper from '../InputWrapper'\n\nconst ALGOLIA_ENDPOINT = 'https://places-dsn.algolia.net/1/places'\n\nconst KANSAS_CITY_OPTION = {\n  label: 'Kansas City, Missouri, United States of America',\n  value: {\n    administrative: ['Missouri'],\n    country: {\n      default: 'United States of America'\n    },\n    locale_names: {\n      default: ['Kansas City']\n    },\n    // from https://tools.wmflabs.org\n    _geoloc: {\n      lat: 39.099722,\n      lng: -94.578333\n    }\n  }\n};\n\nexport default class PlaceSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hits: [], selected: null };\n  }\n\n  componentDidMount() {\n    if (this.props.value) {\n      const { value, name, handleChange } =  this.props\n\n      if (!!value.objectID) {\n        this.fetchPlaceById(value.objectID);\n      } else if (value.city === 'Kansas City, Missouri, United States of America') {\n        this.handleSelect(KANSAS_CITY_OPTION)\n      } else {\n        handleChange({ [name]: null })\n      }\n    }\n  }\n\n  handleSelect = (selected) => {\n    const value = selected ? selected.value : null\n    this.props.handleChange({ [this.props.name]: value })\n    this.setState({ selected })\n  }\n\n  searchPlaces = (query) => {\n    const url = `${ALGOLIA_ENDPOINT}/query/`;\n    const data = {\n      \"type\": \"city\",\n      \"hitsPerPage\": \"10\",\n      \"query\": query\n    };\n    const method = 'post';\n\n    return axios({\n      data,\n      url,\n      method\n    }).then(res => {\n      let options = res.data.hits.map(place => this.generateCityOption(place));\n      // Kansas City, MO is missing from the Algolia places API\n      // so we're manually adding it in\n      // TODO: don't do this\n      if (query.toLowerCase().includes('kansas')) {\n        options.unshift(KANSAS_CITY_OPTION)\n      }\n      return options\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  fetchPlaceById = (placeId) => {\n    const url = `${ALGOLIA_ENDPOINT}/${placeId}`;\n\n    axios.get(url)\n      .then(res => {\n        const value = this.generateCityOption(res.data)\n        this.handleSelect(value)\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  generateCityOption = (place) => {\n    return {\n      label: `${place.locale_names.default[0]}, ${place.administrative[0]}, ${place.country.default}`,\n      value: place\n    }\n  }\n\n  render() {\n    const { label, name, id, value, required, disabled, errorMessage, helpText, classes, selectClasses, handleInputChange, noResultsText, placeholder, isClearable, isMulti, ...rest } = this.props\n    const { selected } = this.state;\n\n    return(\n      <InputWrapper\n        label={label}\n        name={name}\n        id={id}\n        required={required}\n        disabled={disabled}\n        errorMessage={errorMessage}\n        helpText={helpText}\n        classes={classes}\n      >\n        <AsyncSelect\n          name={ name }\n          className={ `city-select ${selectClasses}` }\n          value={ selected }\n          onChange={ this.handleSelect }\n          onInputChange={ handleInputChange }\n          noResultsText={ noResultsText }\n          placeholder={ placeholder }\n          loadOptions={ this.searchPlaces }\n          isClearable={ isClearable }\n          isMulti={ isMulti }\n          isDisabled={ disabled }\n          classNamePrefix={'place-select'}\n          theme={theme => ({\n            ...theme,\n            colors: {\n              ...theme.colors,\n              primary: '#05c6b4',\n              primary75: '#D3D8E6',\n              primary50: '#e0f7f5',\n              primary25: '#F3F4F8'\n            },\n          })}\n          {...rest}\n        />\n      </InputWrapper>\n    )\n  }\n}\n\nPlaceSelect.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleInputChange: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  classes: PropTypes.string,\n  noResultsText: PropTypes.string,\n  placeholder: PropTypes.string,\n  place_id: PropTypes.string,\n  city: PropTypes.string,\n  errorMessage: PropTypes.string,\n  isClearable: PropTypes.bool,\n  isMulti: PropTypes.bool,\n}\n\nPlaceSelect.defaultProps = {\n  noResultsText: \"No results for this city\",\n  placeholder: \"Start typing a city name...\",\n  classes: \"\",\n  selectClasses: \"\",\n  name: \"select-place\",\n  handleChange: (selected) => console.log(\"Implement a function to save selection\", selected),\n  isClearable: true,\n  isMulti: false,\n}\n\n"],"file":"PlaceSelect.js"}