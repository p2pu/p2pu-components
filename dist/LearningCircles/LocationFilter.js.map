{"version":3,"sources":["../../src/LearningCircles/LocationFilter.jsx"],"names":["React","Component","axios","t","CitySelectInput","Select","LocationFilter","props","e","useGeolocation","target","checked","setState","gettingLocation","useLocation","error","updateQueryParams","latitude","longitude","success","position","coords","city","detectDistanceUnit","options","timeout","maximumAge","navigator","geolocation","getCurrentPosition","lat","lon","countriesUsingMiles","url","get","then","res","useMiles","indexOf","countryCode","distance","label","state","range","unit","value","generateDistanceValue","Math","round","Boolean","prevProps","distanceValue","handleCitySelect","getLocation","map","d","handleRangeChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport {t} from 'ttag';\nimport {CitySelectInput} from '../InputFields/CitySelect'\nimport Select from '../InputFields/Select';\n\nexport default class LocationFilter extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      useLocation: (Boolean(props.latitude) && Boolean(props.longitude)),\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      if (this.props.latitude === null && this.props.longitude === null) {\n        this.setState({ useLocation: false })\n      }\n    }\n  }\n\n  getLocation = (e) => {\n    const useGeolocation = e.target.checked;\n\n    this.setState({ gettingLocation: useGeolocation, useLocation: useGeolocation, error: null });\n\n    if (useGeolocation === false) {\n      this.props.updateQueryParams({ latitude: null, longitude: null, useLocation: useGeolocation });\n      return;\n    }\n\n    const success = (position) => {\n      this.props.updateQueryParams({ latitude: position.coords.latitude, longitude: position.coords.longitude, city: null })\n      this.detectDistanceUnit(position.coords.latitude, position.coords.longitude);\n      this.setState({ gettingLocation: false });\n    }\n\n    const error = () => {\n      this.setState({ error: t`Unable to detect location.`, gettingLocation: false, useLocation: false})\n      this.props.updateQueryParams({ latitude: null, longitude: null, useLocation: useGeolocation });\n    }\n\n    const options = {\n      timeout: 10000,\n      maximumAge: 60000\n    }\n\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(success, error, options)\n    } else {\n      this.setState({ error: t`Geolocation is not supported by this browser.`, gettingLocation: false, useLocation: false})\n      this.props.updateQueryParams({ latitude: null, longitude: null, useLocation: useGeolocation });\n    }\n  }\n\n  detectDistanceUnit = (lat, lon) => {\n    const countriesUsingMiles = ['US', 'GB', 'LR', 'MM'];\n    const url = `http://api.geonames.org/countryCodeJSON?lat=${lat}&lng=${lon}&username=p2pu`;\n\n    axios.get(url)\n      .then(res => {\n        const useMiles = countriesUsingMiles.indexOf(res.countryCode) >= 0;\n        // update distance so that options in dropdown remains 5, 10, 25, ...\n        // regardless of kilometer of miles\n        let distance = this.props.distance;\n        if (useMiles != this.props.useMiles){\n          distance = useMiles?distance*1.6:distance*0.625;\n        }\n        this.props.updateQueryParams({ useMiles, distance })\n      })\n  }\n\n  generateLocationLabel = () => {\n    let label = t`Use my current location`;\n\n    if (this.state.error) {\n      label = this.state.error;\n    } else if (this.state.gettingLocation) {\n      label = t`Detecting your location...`;\n    } else if (!this.state.gettingLocation && this.props.latitude && this.props.longitude) {\n      label = t`Using your current location`;\n    }\n\n    return label;\n  }\n\n  handleCitySelect = (city) => {\n    // want to get lat and lon for city\n    this.props.updateQueryParams({ ...city, latitude: null, longitude: null });\n    this.setState({ useLocation: false, error: null });\n  }\n\n  handleRangeChange = ({range}) => {\n    let distance = range;\n    if (this.props.useMiles) {\n      return this.props.updateQueryParams({ distance: distance * 1.6 })\n    }\n    this.props.updateQueryParams({ distance });\n  }\n\n  generateDistanceSliderLabel = () => {\n    const unit = this.props.useMiles ? t`miles` : t`km`;\n    const value = this.generateDistanceValue();\n    return t`Within ${value} ${unit}`;\n  }\n\n  generateDistanceValue = () => {\n    const value = this.props.useMiles ? this.props.distance * 0.625 : this.props.distance;\n    return Math.round(value / 5) * 5;\n  }\n\n  render() {\n    const distanceValue = this.generateDistanceValue();\n\n    return (\n      <form className=\"filter\">\n        <label htmlFor=\"search-input\" className=\"form-label\">Location</label>\n        <div className=\"search-input my-2 my-md-0\">\n          <CitySelectInput\n            name='city'\n            value={this.props.city}\n            isClearable={true}\n            handleChange={this.handleCitySelect}\n            placeholder={t`Start typing a city name`}\n          />\n        </div>\n\n        <div className=\"d-flex flex-column align-items-center p-3\">\n          <div className=\"divider-line\"></div>\n          <div className=\"divider-text\">or</div>\n        </div>\n\n        <div className=\"input-group-md has-validation\">\n          <input \n            type=\"checkbox\" \n            checked={this.state.useLocation || false}\n            onChange={this.getLocation}\n            className={this.state.error?'is-invalid':''}\n          />\n          <span>Within</span>\n          <Select\n            className=\"flex-grow-1\" \n            name=\"range\"\n            options={[5, 10, 25, 50, 100].map(d => ({label: `${d}`, value: d}))}\n            value={distanceValue}\n            handleChange={this.handleRangeChange}\n          />\n          { this.props.useMiles && <span>miles of my current location</span> }\n          { !this.props.useMiles && <span>kilometers of my current location</span> }\n          <span className=\"material-icons\">place </span>\n          { this.state.error &&\n            <div className=\"invalid-feedback\">{ this.state.error }</div>\n          }\n        </div>\n        { false &&\n          <span>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"online\" />\n              <label class=\"form-check-label\" for=\"online\">online</label>\n            </div>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"in-person\" />\n              <label class=\"form-check-label\" for=\"in-person\">in person</label>\n            </div>\n         \n          </span>\n        }\n      </form>\n    );\n  }\n}\n"],"file":"LocationFilter.js"}