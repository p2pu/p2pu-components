{"version":3,"sources":["../../src/LearningCircles/LocationFilter.jsx"],"names":["React","Component","axios","t","CheckboxWithLabel","RangeSliderWithLabel","CitySelectInput","Select","LocationFilter","props","e","useGeolocation","target","checked","setState","gettingLocation","useLocation","updateQueryParams","latitude","longitude","success","position","coords","city","detectDistanceUnit","error","options","timeout","maximumAge","navigator","geolocation","getCurrentPosition","lat","lon","countriesUsingMiles","url","get","then","res","useMiles","indexOf","countryCode","label","state","distance","range","unit","value","generateDistanceValue","Math","round","Boolean","prevProps","distanceSliderLabel","generateDistanceSliderLabel","distanceValue","handleCitySelect","getLocation","map","d","handleRangeChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport {t} from 'ttag';\nimport CheckboxWithLabel from '../InputFields/CheckboxWithLabel'\nimport RangeSliderWithLabel from '../InputFields/RangeSliderWithLabel'\nimport {CitySelectInput} from '../InputFields/CitySelect'\nimport Select from '../InputFields/Select';\n\nexport default class LocationFilter extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { useLocation: (Boolean(props.latitude) && Boolean(props.longitude)) }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      if (this.props.latitude === null && this.props.longitude === null) {\n        this.setState({ useLocation: false })\n      }\n    }\n  }\n\n  getLocation = (e) => {\n    const useGeolocation = e.target.checked;\n\n    this.setState({ gettingLocation: useGeolocation, useLocation: useGeolocation });\n\n    if (useGeolocation === false) {\n      this.props.updateQueryParams({ latitude: null, longitude: null, useLocation: useGeolocation });\n      return;\n    }\n\n    const success = (position) => {\n      this.props.updateQueryParams({ latitude: position.coords.latitude, longitude: position.coords.longitude, city: null })\n      this.detectDistanceUnit(position.coords.latitude, position.coords.longitude);\n      this.setState({ gettingLocation: false });\n    }\n\n    const error = () => {\n      this.setState({ error: t`Unable to detect location.` })\n    }\n\n    const options = {\n      timeout: 10000,\n      maximumAge: 60000\n    }\n\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(success, error, options)\n    } else {\n      this.setState({ error: t`Geolocation is not supported by this browser.`})\n    }\n  }\n\n  detectDistanceUnit = (lat, lon) => {\n    const countriesUsingMiles = ['US', 'GB', 'LR', 'MM'];\n    const url = `http://api.geonames.org/countryCodeJSON?lat=${lat}&lng=${lon}&username=p2pu`;\n\n    axios.get(url)\n      .then(res => {\n        const useMiles = countriesUsingMiles.indexOf(res.countryCode) >= 0;\n        this.props.updateQueryParams({ useMiles })\n      })\n  }\n\n  generateLocationLabel = () => {\n    let label = t`Use my current location`;\n\n    if (this.state.error) {\n      label = this.state.error;\n    } else if (this.state.gettingLocation) {\n      label = t`Detecting your location...`;\n    } else if (!this.state.gettingLocation && this.props.latitude && this.props.longitude) {\n      label = t`Using your current location`;\n    }\n\n    return label;\n  }\n\n  handleCitySelect = (city) => {\n    // want to get lat and lon for city\n    this.props.updateQueryParams({ ...city, latitude: null, longitude: null, distance: 50 });\n    this.setState({ useLocation: false });\n  }\n\n  handleRangeChange = ({range}) => {\n    let distance = range;\n    if (this.props.useMiles) {\n      return this.props.updateQueryParams({ distance: distance * 1.6 })\n    }\n    this.props.updateQueryParams({ distance });\n  }\n\n  generateDistanceSliderLabel = () => {\n    const unit = this.props.useMiles ? t`miles` : t`km`;\n    const value = this.generateDistanceValue();\n    return t`Within ${value} ${unit}`;\n  }\n\n  generateDistanceValue = () => {\n    const value = this.props.useMiles ? this.props.distance * 0.62 : this.props.distance;\n    return Math.round(value / 10) * 10;\n  }\n\n  render() {\n    const distanceSliderLabel = this.generateDistanceSliderLabel();\n    const distanceValue = this.generateDistanceValue();\n\n    return (\n      <form className=\"filter\">\n        <label for=\"search-input\" className=\"form-label\">Location</label>\n        <div className=\"search-input my-2 my-md-0\">\n          <CitySelectInput\n            name='city'\n            value={this.props.city}\n            isClearable={true}\n            handleChange={this.handleCitySelect}\n          />\n        </div>\n\n        <div className=\"d-flex flex-column align-items-center p-3\">\n          <div className=\"divider-line\"></div>\n          <div className=\"divider-text\">or</div>\n        </div>\n\n        <div className=\"input-group-md\">\n          { false && <CheckboxWithLabel\n              classes='col-sm-12'\n              name='geolocation'\n              label=''\n              value={this.state.useLocation || false}\n              handleChange={this.getLocation}\n            />\n          }\n          <input \n            type=\"checkbox\" \n            value={this.state.useLocation || false}\n            onChange={this.getLocation}\n          />\n          <span>Within</span>\n          <Select\n            className=\"flex-grow-1\" \n            name=\"range\"\n            options={[\"1\", \"5\", \"10\", \"25\", \"50\", \"100\"].map(d => ({label: d, value: d}))}\n            value={this.props.distanceValue}\n            handleChange={this.handleRangeChange}\n          />\n          <span>miles of my current location</span>\n          <span className=\"material-icons\">place </span>\n          { false &&\n          <span>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"online\" />\n              <label class=\"form-check-label\" for=\"online\">online</label>\n            </div>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"in-person\" />\n              <label class=\"form-check-label\" for=\"in-person\">in person</label>\n            </div>\n     \n          </span>\n          }\n        </div>\n      </form>\n\n    )\n\n    /*\n    return(\n      <div>\n        <label for=\"search-input\" class=\"form-label\">Location</label>\n        <CheckboxWithLabel\n          classes='col-sm-12'\n          name='geolocation'\n          label={this.generateLocationLabel()}\n          value={this.state.useLocation || false}\n          handleChange={this.getLocation}\n        />\n        <RangeSliderWithLabel\n          classes='col-sm-12'\n          label={distanceSliderLabel}\n          name='distance'\n          value={distanceValue}\n          handleChange={this.handleRangeChange}\n          min={10}\n          max={150}\n          step={10}\n          disabled={!this.state.useLocation}\n        />\n        <div className='divider col-sm-12'>\n          <div className='divider-line'></div>\n          <div className='divider-text'>{t`or`}</div>\n        </div>\n        <CitySelect\n          label={t`Select a location`}\n          classes='city-select col-sm-12 search-input'\n          name='city'\n          value={this.props.city}\n          handleChange={this.handleCitySelect}\n          placeholder={t`Start typing a city name`}\n          noResultsText={t`No results for this city`}\n          isMulti={false}\n        />\n      </div>\n    );\n    */\n  }\n}\n"],"file":"LocationFilter.js"}